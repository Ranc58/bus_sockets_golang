// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package buses

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson66f4dc90DecodeBusSocketsBuses(in *jlexer.Lexer, out *RouteInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "station_start_name":
			out.StationStartName = string(in.String())
		case "station_stop_name":
			out.StationStopName = string(in.String())
		case "coordinates":
			if in.IsNull() {
				in.Skip()
				out.Coordinates = nil
			} else {
				in.Delim('[')
				if out.Coordinates == nil {
					if !in.IsDelim(']') {
						out.Coordinates = make([]*Point, 0, 8)
					} else {
						out.Coordinates = []*Point{}
					}
				} else {
					out.Coordinates = (out.Coordinates)[:0]
				}
				for !in.IsDelim(']') {
					var v1 *Point
					if in.IsNull() {
						in.Skip()
						v1 = nil
					} else {
						if v1 == nil {
							v1 = new(Point)
						}
						if in.IsNull() {
							in.Skip()
						} else {
							in.Delim('[')
							v2 := 0
							for !in.IsDelim(']') {
								if v2 < 2 {
									(*v1)[v2] = float64(in.Float64())
									v2++
								} else {
									in.SkipRecursive()
								}
								in.WantComma()
							}
							in.Delim(']')
						}
					}
					out.Coordinates = append(out.Coordinates, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66f4dc90EncodeBusSocketsBuses(out *jwriter.Writer, in RouteInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"station_start_name\":"
		out.RawString(prefix)
		out.String(string(in.StationStartName))
	}
	{
		const prefix string = ",\"station_stop_name\":"
		out.RawString(prefix)
		out.String(string(in.StationStopName))
	}
	{
		const prefix string = ",\"coordinates\":"
		out.RawString(prefix)
		if in.Coordinates == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v3, v4 := range in.Coordinates {
				if v3 > 0 {
					out.RawByte(',')
				}
				if v4 == nil {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v5 := range *v4 {
						if v5 > 0 {
							out.RawByte(',')
						}
						out.Float64(float64((*v4)[v5]))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RouteInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66f4dc90EncodeBusSocketsBuses(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RouteInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66f4dc90EncodeBusSocketsBuses(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RouteInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66f4dc90DecodeBusSocketsBuses(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RouteInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66f4dc90DecodeBusSocketsBuses(l, v)
}
func easyjson66f4dc90DecodeBusSocketsBuses1(in *jlexer.Lexer, out *BusesData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "msgType":
			out.MsgType = string(in.String())
		case "buses":
			if in.IsNull() {
				in.Skip()
				out.Buses = nil
			} else {
				in.Delim('[')
				if out.Buses == nil {
					if !in.IsDelim(']') {
						out.Buses = make([]BusRouteData, 0, 1)
					} else {
						out.Buses = []BusRouteData{}
					}
				} else {
					out.Buses = (out.Buses)[:0]
				}
				for !in.IsDelim(']') {
					var v6 BusRouteData
					(v6).UnmarshalEasyJSON(in)
					out.Buses = append(out.Buses, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66f4dc90EncodeBusSocketsBuses1(out *jwriter.Writer, in BusesData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"msgType\":"
		out.RawString(prefix[1:])
		out.String(string(in.MsgType))
	}
	{
		const prefix string = ",\"buses\":"
		out.RawString(prefix)
		if in.Buses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Buses {
				if v7 > 0 {
					out.RawByte(',')
				}
				(v8).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BusesData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66f4dc90EncodeBusSocketsBuses1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BusesData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66f4dc90EncodeBusSocketsBuses1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BusesData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66f4dc90DecodeBusSocketsBuses1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BusesData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66f4dc90DecodeBusSocketsBuses1(l, v)
}
func easyjson66f4dc90DecodeBusSocketsBuses2(in *jlexer.Lexer, out *BusRouteData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "busId":
			out.BusID = string(in.String())
		case "lat":
			out.Lat = float64(in.Float64())
		case "lng":
			out.Lng = float64(in.Float64())
		case "route":
			out.Route = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson66f4dc90EncodeBusSocketsBuses2(out *jwriter.Writer, in BusRouteData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"busId\":"
		out.RawString(prefix[1:])
		out.String(string(in.BusID))
	}
	{
		const prefix string = ",\"lat\":"
		out.RawString(prefix)
		out.Float64(float64(in.Lat))
	}
	{
		const prefix string = ",\"lng\":"
		out.RawString(prefix)
		out.Float64(float64(in.Lng))
	}
	{
		const prefix string = ",\"route\":"
		out.RawString(prefix)
		out.String(string(in.Route))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v BusRouteData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson66f4dc90EncodeBusSocketsBuses2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BusRouteData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson66f4dc90EncodeBusSocketsBuses2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BusRouteData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson66f4dc90DecodeBusSocketsBuses2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BusRouteData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson66f4dc90DecodeBusSocketsBuses2(l, v)
}
